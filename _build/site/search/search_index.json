{
    "docs": [
        {
            "location": "/",
            "text": "TensorTools\n\n\nA simple repository which implements common things I use in my ML projects so I don't have to repeat myself. See \nexamples/\n for some examples which use this repository. \n\n\nBetter API documentation coming ASAP!\n\n\nInstallation\n\n\npip install tensortools\n\n\n\n\nExample\n\n\nimport tensorflow as tf\nimport tensortools as tt\nimport numpy as np\n\n# Generate images with random shapes for object detection\nimage_generator = tf.generator.Generator()\nimages = image_generator.generate(n_images=1, height=100, width=100, max_shapes=2)\nimage = images[0]\ntt.image.show(image)\n\n# Some simple ops\nvector = tt.ops.flatten(image, has_batch=False)\nwith tf.Session() as sess:\n  vector = sess.run([vector])\n\n# Generate anchors for YOLO algorithm using KMeans\nannotations = load_annotations()\nanchors = tt.yolo.generate_anchors()",
            "title": "Home"
        },
        {
            "location": "/#tensortools",
            "text": "A simple repository which implements common things I use in my ML projects so I don't have to repeat myself. See  examples/  for some examples which use this repository.   Better API documentation coming ASAP!",
            "title": "TensorTools"
        },
        {
            "location": "/#installation",
            "text": "pip install tensortools",
            "title": "Installation"
        },
        {
            "location": "/#example",
            "text": "import tensorflow as tf\nimport tensortools as tt\nimport numpy as np\n\n# Generate images with random shapes for object detection\nimage_generator = tf.generator.Generator()\nimages = image_generator.generate(n_images=1, height=100, width=100, max_shapes=2)\nimage = images[0]\ntt.image.show(image)\n\n# Some simple ops\nvector = tt.ops.flatten(image, has_batch=False)\nwith tf.Session() as sess:\n  vector = sess.run([vector])\n\n# Generate anchors for YOLO algorithm using KMeans\nannotations = load_annotations()\nanchors = tt.yolo.generate_anchors()",
            "title": "Example"
        },
        {
            "location": "/api/image/",
            "text": "tensortools.image\n\n\n\nshow\n\n\n\nshow(image)\n\n\n\n\nDisplays the image in a popup window.\n\n\nArguments\n:\n\n\n\n\nimage\n: The image.",
            "title": "Image"
        },
        {
            "location": "/api/utils/",
            "text": "tensortools.utils\n\n\n\nstandardize\n\n\n\nstandardize(arr)\n\n\n\n\nNormalizes an array by subtracting the mean and dividing by the standard deviation. See\nhttps://en.wikipedia.org/wiki/Feature_scaling.\n\n\n\n\n\n\n\n\nstandardize([1, 2, 3])\narray([-1.22474487,  0.        ,  1.22474487])\n\n\n\n\n\n\n\n\nArguments\n:\n\n\n\n\narr\n: The array to normalize.\n\n\n\n\nReturns\n:\n\n\nThe normalized array.\n\n\niou\n\n\n\niou(box_a, box_b)\n\n\n\n\nCalculates the IOU between two boxes.\n\n\nFor example:\n\n\n\n\n\n\n\n\niou([0.5, 0.5], [1, 1])\n0.25\n\n\n\n\n\n\n\n\nArguments\n:\n\n\n\n\nbox_a\n: \n\n\nbox_b\n: \n\n\n\n\nReturns\n:\n\n\navg_iou\n\n\n\navg_iou(annotations, anchors)\n\n\n\n\nCalculates the average iou between the given anchors. Only the max IOU between each annotation and anchor is used\nto calculate the average.\n\n\nArguments\n:\n\n\n\n\nannotations\n: The annotations, shape [n_annotations, 2].\n\n\nanchors\n: The anchors, shape [n_anchors, 2].\n\n\n\n\nReturns\n:\n\n\nThe average IOU.\n\n\ncount\n\n\n\ncount(arr, value)\n\n\n\n\nCounts the occurrences of the value in the given iterable.\n\n\nArguments\n:\n\n\n\n\narr\n: The iterable.\n\n\nvalue\n: The value to count.\n\n\n\n\nReturns\n:\n\n\nThe number of occurrences.\n\n\ndownload_file\n\n\n\ndownload_file(url, dst)\n\n\n\n\nDownloads a file from a url to the given destination with % finished bar.\n\n\nArguments\n:\n\n\n\n\nurl\n: The url.\n\n\ndst\n: The destination.",
            "title": "Utils"
        },
        {
            "location": "/api/ssd/",
            "text": "tensortools.ssd\n\n\n\ngenerate_anchors\n\n\n\ngenerate_anchors(annotations, fm_sizes, n_clusters)\n\n\n\n\nGenerate anchors for an SSD model using KMeans. First, the algorithm matches each annotation with the appropriate\nfeature map. It does this by calculating the highest IOU between the annotation and one feature map cell. For\nexample, a feature map of [10, 10] and annotation of [0.1, 0.1] would have an IOU of 1. Next, it runs a KMeans\nalgorithm for each set of annotations.\n\n\nArguments\n:\n\n\n\n\nannotations\n: The annotations, shape \n[n_samples, 4]\n. Each annotation should be in the following form:\n\n[r1, c1, r2, c2]\n where the first point is the ULC and the second point is the LRC. Each value should be in the\nrange \n[0, 1]\n\n\nfm_sizes\n: The feature map sizes, shape \n[n_fm, 2]\n. For example, \n[[13, 13], [5, 5]]\n\n\nn_clusters\n: The number of clusters (aka the number of desired bounding boxes for each feature map).\n\n\n\n\nReturns\n:\n\n\nThe anchors boxes, shape \n[n_fm, n_clusters, 2]\n. Each value is in its normalized form in the range of\n[0, 1].",
            "title": "SSD"
        },
        {
            "location": "/api/yolo/",
            "text": "tensortools.yolo\n\n\n\ngenerate_anchors\n\n\n\ngenerate_anchors(annotations, num_clusters)\n\n\n\n\nGenerate anchors for YOLO V2 & V3 using the algorithm described in the paper (KMeans).\n\n\nArguments\n:\n\n\n\n\nannotations\n: The annotations, shape \n[n_annotations, 2]\n.\n\n\nnum_clusters\n: The amount of clusters to create.\n\n\n\n\nReturns\n:\n\n\nThe centroids (annotations) that best cluster the given annotations, shape \n[num_clusters, 2]\n.",
            "title": "YOLO"
        },
        {
            "location": "/api/abc/",
            "text": "tensortools.abc\n\n\n\nabstract\n\n\n\nabstract(func)\n\n\n\n\nAn abstract decorator. Raises a NotImplementedError if called.\n\n\nArguments\n:\n\n\n\n\nfunc\n: The function.\n\n\n\n\nReturns\n:\n\n\nThe wrapper function.\n\n\nLazyLoader\n\n\n\nLazyLoader(self, local_name, parent_module_globals, name)\n\n\n\n\nLazily import a module, mainly to avoid pulling in large dependencies.\n\n\ncontrib\n, and \nffmpeg\n are examples of modules that are large and not always\nneeded, and this allows them to only be loaded when they are used.",
            "title": "ABC"
        },
        {
            "location": "/api/generator/",
            "text": "tensortools.generator\n\n\n\nRectangleGenerator\n\n\n\nRectangleGenerator(self, /, *args, **kwargs)\n\n\n\n\nGenerates rectangles.\n\n\nCircleGenerator\n\n\n\nCircleGenerator(self, /, *args, **kwargs)\n\n\n\n\nGenerates circles.\n\n\nTriangleGenerator\n\n\n\nTriangleGenerator(self, /, *args, **kwargs)\n\n\n\n\nGenerates triangles.\n\n\nGenerator\n\n\n\nGenerator(self, /, *args, **kwargs)\n\n\n\n\ngenerate\n\n\n\nGenerator.generate(self, n_images, height, width, max_shapes, min_shapes=1, min_size=2, max_size=None, shape=None, allow_overlap=False)\n\n\n\n\nGenerates a fake object detection dataset of squares, triangles & circles!\n\n\nArguments\n:\n\n\n\n\nn_images\n: The amount images to generate.\n\n\nheight\n: The height of the desired images.\n\n\nwidth\n: The width of the desired images.\n\n\nmax_shapes\n: The max amount of shapes per image.\n\n\nmin_shapes\n: The min amount of shapes per image.\n\n\nmin_size\n: The min size of the shapes.\n\n\nmax_size\n: The max size of the shapes.\n\n\nshape\n: The type of shape. If None, a shape is randomly chosen each time.\n\n\nallow_overlap\n: Whether or not to allow overlap.\n\n\n\n\nReturns\n:\n\n\nimages: The generates images, shape [n_images, height, width, 3].",
            "title": "Generator"
        },
        {
            "location": "/api/hooks/",
            "text": "tensortools.hooks\n\n\n\nIntervalHook\n\n\n\nIntervalHook(self, interval)\n\n\n\n\nA hook which runs every # of iterations. Useful for subclassing.\n\n\nsession_run_args\n\n\n\nIntervalHook.session_run_args(self, run_context)\n\n\n\n\nCreate the session run arguments.\n\n\nArguments\n:\n\n\n\n\nrun_context\n: The run context.\n\n\n\n\nReturns\n:\n\n\nThe list of arguments to run.\n\n\nGlobalStepIncrementor\n\n\n\nGlobalStepIncrementor(self)\n\n\n\n\nIncrements the global step after each \nSession\n \nrun\n call. Useful for models which do not use optimizers.",
            "title": "Hooks"
        },
        {
            "location": "/api/ops/",
            "text": "tensortools.ops\n\n\n\nfully_connected\n\n\n\nfully_connected(inputs, units, use_bias=True, activation=None, keep_prob=<tf.Tensor 'default_keep_prob:0' shape=() dtype=float32>, initializer=None)\n\n\n\n\nA fully connected layer with dropout included.\n\n\nArguments\n:\n\n\n\n\ninputs\n: The inputs in the shape of [batch_size, previous_layer_units]\n\n\nunits\n: The number of units for the layer.\n\n\nuse_bias\n: Whether to use bias.\n\n\nactivation\n: The TensorFlow activation function to use.\n\n\nkeep_prob\n: The keep probability to use for the dropout layer.\n\n\ninitializer\n: The kernal initializer.\n\n\n\n\nReturns\n:\n\n\nflatten\n\n\n\nflatten(tensor, has_batch=False)\n\n\n\n\nFlattens a tensor.\n\n\nArguments\n:\n\n\n\n\ntensor\n: Tensor of shape [batch_size, dim1, dim2 ... dimn] or [dim1, dim2 ... dimn]\n\n\nhas_batch\n: Whether or not the tensor has a batch dimension. If so, it is preserved.\n\n\n\n\nReturns\n:\n\n\nTensor of shape [batch_size, dim1\ndim2\n...\ndimn] or [dim1\ndim2\n ... \ndimn]",
            "title": "Ops"
        }
    ]
}